{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ad3a6aed",
   "metadata": {},
   "source": [
    "  # Datos suministrados "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "673f018c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import sympy as sp\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f2fc242c",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Datos del codigo de estudiante \n",
    "\n",
    "x = 2 + 1 + 9 + 4 + 0 + 2 + 8\n",
    "y = x / 3\n",
    "# Longitud barra AB\n",
    "\n",
    "L1 = 0.05 * x\n",
    "L2 = L1 * (3 / 2)\n",
    "L3 = L1 / 2\n",
    "\n",
    "# Longitud de la barra\n",
    "\n",
    "L = L1 + L2 + L3\n",
    "\n",
    "# Cargas \n",
    "P = x / 20\n",
    "W = (x / 200) + (y / 100)\n",
    "\n",
    "# Angulo del cable\n",
    "\n",
    "angulo_cable = 45 * np.pi / 180"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "47370e34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingrese L1 en metros: 0.85\n",
      "Ingrese L2 en metros: 1.275\n",
      "Ingrese L3 en metros: 0.425\n",
      "Ingrese L en metros: 2.55\n",
      "Ingrese w en kN / m: 0.142\n",
      "Ingrese P en kN: 0.85\n"
     ]
    }
   ],
   "source": [
    "D_viga = {\n",
    "    \"L1\": \"metros\",\n",
    "    \"L2\": \"metros\",\n",
    "    \"L3\": \"metros\",\n",
    "    \"L\": \"metros\",\n",
    "    \"w\": \"kN / m\",\n",
    "    \"P\": \"kN\",\n",
    "}\n",
    "\n",
    "for llave, valor in D_viga.items():\n",
    "    while True:\n",
    "        try:\n",
    "            D_viga[llave] = float(input(f\"Ingrese {llave} en {valor}: \"))\n",
    "            break\n",
    "        except:\n",
    "            print(f\"Ingrese correctamente el dato {llave} con su unidad en {valor}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bfd65638",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'L1': 0.85, 'L2': 1.275, 'L3': 0.425, 'L': 2.55, 'w': 0.142, 'P': 0.85}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D_viga"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "830a6b6c",
   "metadata": {},
   "source": [
    "# Ecuaciones de equilibrio."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9f1666e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "Ax, Ay, Ma, x = sp.symbols(\"Ax Ay Ma x\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "171983e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 0.601040764008565$"
      ],
      "text/plain": [
       "0.601040764008565"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sumatoria de fuerzas en x [kN]\n",
    "\n",
    "Equi_x = Ax - (D_viga[\"P\"] * sp.cos(angulo_cable))\n",
    "Ecua_x = sp.Eq(Equi_x, 0)\n",
    "Ax =  sp.solve(Ecua_x)[0]\n",
    "Ax "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b008af89",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle -0.329465764008565$"
      ],
      "text/plain": [
       "-0.329465764008565"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sumatoria de fuerzas en y [kN]\n",
    "\n",
    "Equi_y = Ay + (D_viga[\"P\"] * sp.sin(angulo_cable)) - ((D_viga[\"w\"] * D_viga[\"L1\"]) / 2) - ((D_viga[\"w\"] * D_viga[\"L3\"]) / 2) - (D_viga[\"w\"] * D_viga[\"L2\"]) \n",
    "Ecua_y = sp.Eq(Equi_y, 0)\n",
    "Ay =  sp.solve(Ecua_y)[0]\n",
    "Ay "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e188805e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle -1.16074707322184$"
      ],
      "text/plain": [
       "-1.16074707322184"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sumatoria de momentos en A [kN*m]\n",
    "\n",
    "Equi_moment =  Ma + (D_viga[\"P\"] * sp.sin(angulo_cable) * D_viga[\"L\"]) - (((D_viga[\"w\"] * D_viga[\"L1\"]) / 2) * (2/3) * (D_viga[\"L1\"])) -(((D_viga[\"w\"] * D_viga[\"L3\"]) / 2) * (D_viga[\"L\"] - ((2/3)*D_viga[\"L3\"]))) - ((D_viga[\"w\"] * D_viga[\"L2\"]) * (D_viga[\"L1\"] + (D_viga[\"L2\"]/2)))\n",
    "Ecua_moment = sp.Eq(Equi_moment, 0)\n",
    "Ma =  sp.solve(Ecua_moment)[0]\n",
    "Ma"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86c14934",
   "metadata": {},
   "source": [
    "# Fuerzas internas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "eb5413b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle - 0.027843137254902 x^{3} - 0.329465764008565 x + 1.16074707322184$"
      ],
      "text/plain": [
       "-0.027843137254902*x**3 - 0.329465764008565*x + 1.16074707322184"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# tramo AC con x=0 en A, 0 <= x <= L1\n",
    "\n",
    "carga_distribuida = (D_viga[\"w\"] * x) / D_viga[\"L1\"]\n",
    "\n",
    "# Fuerza cortante y momento flector para AC\n",
    "\n",
    "Vx_1 = Ay - sp.integrate(carga_distribuida, x)\n",
    "\n",
    "Mx_1 = - Ma + sp.integrate(Vx_1, x)\n",
    "Mx_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ceb31a92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle - 0.071 x^{2} - 0.389815764008565 x + 0.863602007147893$"
      ],
      "text/plain": [
       "-0.071*x**2 - 0.389815764008565*x + 0.863602007147893"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# tramo CD con x=0 en C, 0 <= x <= L2\n",
    "\n",
    "carga_distribuida = D_viga[\"w\"] \n",
    "\n",
    "# Fuerza cortante y momento flector para CD\n",
    "\n",
    "Vx_2 = - sp.integrate(carga_distribuida, x) + Vx_1.subs(x, D_viga[\"L1\"])\n",
    "\n",
    "Mx_2 = sp.integrate(Vx_2, x) + Mx_1.subs(x, D_viga[\"L1\"])\n",
    "Mx_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7e90d15c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle 0.0556862745098039 x^{3} - 0.071 x^{2} - 0.570865764008565 x + 0.251167533036973$"
      ],
      "text/plain": [
       "0.0556862745098039*x**3 - 0.071*x**2 - 0.570865764008565*x + 0.251167533036973"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# tramo DB con x=0 en D, 0 <= x <= L3\n",
    "\n",
    "carga_distribuida =  (- (D_viga[\"w\"] / D_viga[\"L3\"]) * x) + D_viga[\"w\"]\n",
    "\n",
    "# Fuerza cortante y momento flector para DB\n",
    "\n",
    "Vx_3 = - sp.integrate(carga_distribuida, x) + Vx_2.subs(x, D_viga[\"L2\"]) \n",
    "\n",
    "Mx_3 = sp.integrate(Vx_3, x) + Mx_2.subs(x, D_viga[\"L2\"])\n",
    "Mx_3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b56927bb",
   "metadata": {},
   "source": [
    "# Solucion inciso 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bc9671f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<sympy.plotting.plot.Plot at 0x1fd2bf2f520>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Grafica de fuerza cortante\n",
    "x_array = np.arange(0, D_viga[\"L\"] + 0.01, 0.01)\n",
    "\n",
    "Tramo_1 = sp.lambdify(x, Vx_1)(x_array[x_array <= D_viga[\"L1\"]])\n",
    "Tramo_2 = sp.lambdify(x, Vx_2)(x_array[(x_array > D_viga[\"L1\"]) & (x_array <= (D_viga[\"L1\"] + D_viga[\"L2\"]))] - D_viga[\"L1\"])\n",
    "Tramo_3 = sp.lambdify(x, Vx_3)(x_array[x_array >( D_viga[\"L1\"] + D_viga[\"L2\"]) - D_viga[\"L1\"] - D_viga[\"L2\"]])\n",
    "\n",
    "Corty = np.concatenate((Tramo_1, Tramo_2, Tramo_3))\n",
    "sp.plot((Vx_1, (x, 0, D_viga[\"L1\"])), (Vx_2.subs(x, x - D_viga[\"L1\"]), (x, D_viga[\"L1\"], D_viga[\"L1\"] + D_viga[\"L2\"])), (Vx_3.subs(x, x - (D_viga[\"L1\"] + D_viga[\"L2\"])), (x, D_viga[\"L1\"] + D_viga[\"L2\"], D_viga[\"L\"])), line_color=\"Brown\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "583df27e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<sympy.plotting.plot.Plot at 0x1fd2dcd8070>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Momento flector en kN-m\n",
    "x_array = np.arange(0, D_viga[\"L\"] + 0.01, 0.01)\n",
    "\n",
    "#Funcion de cada tramo (T)\n",
    "Tramo_1 = sp.lambdify(x, Mx_1)(x_array[x_array <= D_viga[\"L1\"]])\n",
    "Tramo_2 = sp.lambdify(x, Mx_2)(x_array[(x_array > D_viga[\"L1\"]) & (x_array <= (D_viga[\"L1\"] + D_viga[\"L2\"]))] - D_viga[\"L1\"])\n",
    "Tramo_3 = sp.lambdify(x, Mx_3)(x_array[x_array >( D_viga[\"L1\"] + D_viga[\"L2\"]) - D_viga[\"L1\"] - D_viga[\"L2\"]])\n",
    "\n",
    "Momenty = np.concatenate((Tramo_1, Tramo_2, Tramo_3))\n",
    "sp.plot((Mx_1, (x, 0, D_viga[\"L1\"])), (Mx_2.subs(x, x - D_viga[\"L1\"]), (x, D_viga[\"L1\"], D_viga[\"L1\"] + D_viga[\"L2\"])), (Mx_3.subs(x, x - (D_viga[\"L1\"] + D_viga[\"L2\"])), (x, D_viga[\"L1\"] + D_viga[\"L2\"], D_viga[\"L\"])), line_color=\"purple\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94bdda3a",
   "metadata": {},
   "source": [
    "# Solucion inciso 2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1d6712f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El valor del cortante máximo es igual a -0.6010365875379767 kN\n",
      "Se ubica a 2.54 metros desde A\n"
     ]
    }
   ],
   "source": [
    "### Maxima fuerza contante [KN]\n",
    "\n",
    "def obtener_maximo(Val_diagrama):\n",
    "    Vmax_positivo = np.amax(Val_diagrama)\n",
    "    Vmax_negativo = np.amin(Val_diagrama)\n",
    "\n",
    "    Vmax = Vmax_positivo\n",
    "    if np.absolute(Vmax_negativo) > Vmax_positivo:\n",
    "        Vmax = Vmax_negativo\n",
    "    \n",
    "    ubicacion = x_array[np.where(Val_diagrama == Vmax)][0]\n",
    "    return Vmax, ubicacion\n",
    "\n",
    "cort_max, ubicacion_cort_max = obtener_maximo(Corty)\n",
    "print(f\"El valor del cortante máximo es igual a {cort_max} kN\")\n",
    "print(f\"Se ubica a {ubicacion_cort_max} metros desde A\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a7bf7c12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.16074707322184"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Momento flector en kN-m\n",
    "\n",
    "Momentmax = 0\n",
    "Momentmax_positivo = np.amax(Momenty)\n",
    "Momentmax_negativo = np.amin(Momenty)\n",
    "\n",
    "if np.abs(Momentmax_negativo) > Momentmax_positivo:\n",
    "    Mmax = np.abs(Momentmax_negativo)\n",
    "else: \n",
    "    Mmax = Momentmax_positivo\n",
    "\n",
    "Mmax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6d03d99",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
